const { promisify } = require('util');
const jwt = require('jsonwebtoken');
const catchAsync = require('../utils/catchAsync');
const User = require('./../models/userModel');
const AppError = require('./../utils/appError');
const sendEmail = require('./../utils/email');
const crypto = require('crypto');
const { appendFile } = require('fs');
const signToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });
};

const createSendToken = (user, statusCode, res) => {
  const token = signToken(user._id);
  const cookieOptions = {
    expires: new Date(
      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000
    ),

    httpOnly: true, //prevent corss side scripting attack
  };

  if (process.env.NODE_ENV === 'production') cookieOptions.secure = true;
  // a small piece of text that a server can send to clients. Then when the client receives a cookie, it will automatically store it and then automatically send it back along with all future requests to the same server.
  res.cookie('jwt', token, cookieOptions);
  //remove password from output
  user.password = undefined;
  res.status(statusCode).json({
    status: 'success',
    token,
    data: {
      user,
    },
  });
};
exports.signup = catchAsync(async (req, res, next) => {
  const newUser = await User.create(req.body);
  createSendToken(newUser, 201, res);

  //

  // const token = signToken(newUser._id);

  // res.status(201).json({
  //   status: 'success',
  //   token, //token send to client
  //   data: {
  //     user: newUser,
  //   },
  // });
});

exports.login = catchAsync(async (req, res, next) => {
  //read email and password from the body
  const { email, password } = req.body;

  //1.check if email and password exist
  if (!email || !password) {
    return next(new AppError('please provide email and password!!', 400));
  }

  //2.check if user exist and password is correct
  const user = await User.findOne({ email }).select('+password');
  if (!user || !(await user.correctPassword(password, user.password))) {
    return next(new AppError('incorrect email or password', 401));
  }

  // //3.if everything ok send token to client

  createSendToken(user, 200, res);
});

//protect middleware function which allow only login user to access alltourroutes api
exports.protect = catchAsync(async (req, res, next) => {
  //1. getting token and check of its there
  //send a token with http header request
  //The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources
  let token;
  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    token = req.headers.authorization.split(' ')[1];
  }
  //console.log(token);
  if (!token) {
    return next(
      new AppError('You are not logged in! please log in to get access', 401)
    );
  }
  //2. verfication token
  const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET); // so here we call the funcion whcih will return the promise
  console.log(decoded);

  //3. check if user still exists
  const currentUser = await User.findById(decoded.id);
  if (!currentUser) {
    return next(
      new AppError('The user belong to this token does no longer exist', 401)
    );
  }
  //4. check if user changed password after the JWT token was issued
  if (currentUser.changedPasswordAfter(decoded.iat)) {
    return next(
      new AppError('User recently changed password!! please log in again', 401)
    );
  }
  //grant access to protected route
  req.user = currentUser;
  next(); //moving to the next middleware router to give access to protected route
});

//user roles and permission

exports.restrictTo = (...roles) => {
  return (req, res, next) => {
    //roles is an array ['admin','lead-guide']roles='user'
    if (!roles.includes(req.user.role)) {
      return next(
        new AppError('You do not have permission to perform this action', 403)
      );
    }
    next();
  };
};
//password reset functionality :Reset token
exports.forgotPassword = catchAsync(async (req, res, next) => {
  //1.get user based on posted email
  const user = await User.findOne({ email: req.body.email });
  if (!user) {
    return next(new AppError('there is no user with email address.', 404));
  }
  //2.generate a random reset token

  const resetToken = user.createPasswordResetToken();
  await user.save({ validateBeforeSave: false }); //deactive all the validator that is specify by the schema
  //3.send it to user's email
  const resetURL = `${req.protocol}://${req.get(
    'host'
  )}/api/v1/users/resetPassword/${resetToken}`;

  const message = `forget ur password?submit a patch request with your new password and passwordconfirm to :${resetURL}.\nif u don't forget your password please ignore this email!!!`;
  try {
    await sendEmail({
      email: user.email,
      subject: 'your password reset token(valid for 10 min)',
      message,
    });

    res.status(200).json({
      status: 'success',
      message: 'token sent to email!!!',
    });
  } catch (err) {
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;
    await user.save({ validateBeforeSave: false }); //deactive all the validator that is specify by the schema
    return next(
      new AppError('there was an error sending the email. try again later!!'),
      500
    );
  }
});
exports.resetPassword = catchAsync(async (req, res, next) => {
  //1get user based on the token
  //so here first we get the token from db which is enrypted and convert to plain token for matching
  const hashedToken = crypto
    .createHash('sha256')
    .update(req.params.token)
    .digest('hex');

  const user = await User.findOne({
    passwordResetToken: hashedToken,
    passwordResetExpires: { $gt: Date.now() },
  });
  //2. if token has not expired and there is a user, set  the new password
  if (!user) {
    return next(new AppError('token is invalid or has expired ', 400));
  }

  user.password = req.body.password;
  user.passwordConfirm = req.body.passwordConfirm;

  user.passwordResetToken = undefined;
  user.passwordResetExpires = undefined;

  await user.save();
  //3 update changedpasswordat property for the user
  //4. log the user in , send jwt

  createSendToken(user, 200, res);
});

//update the current user password

exports.updatePassword = catchAsync(async (req, res, next) => {
  //1. get user from collection
  const user = await User.findById(req.user.id).select('+password');
  //2. check if posted current password is correct
  if (!(await user.correctPassword(req.body.passwordCurrent, user.password))) {
    return next(new AppError('Your current password is wrong.', 401));
  }
  //3. if so update the password

  user.password = req.body.password;
  user.passwordConfirm = req.body.passwordConfirm;
  await user.save();
  //4. log user in and send jwt
  createSendToken(user, 200, res);
});

//allow current login user to manipulate  current user data
